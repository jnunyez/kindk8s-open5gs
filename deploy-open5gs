#!/bin/bash
set -e

HERE=$( cd "$(dirname "$0")" ; pwd -P )
. "$HERE/_env"
. "$HERE/_functions"

VERSION=2.3.2

#if ! oc get namespace "$OPEN5GS_CORE_NS"
#then
#  oc create namespace "$OPEN5GS_CORE_NS"
  oc project "$OPEN5GS_CORE_NS"
#fi

oc create sa open5gs -n $OPEN5GS_CORE_NS
oc adm policy add-scc-to-user privileged -z open5gs -n "$OPEN5GS_CORE_NS"

oc delete configmap --selector=app.kubernetes.io/part-of=open5gs -n $OPEN5GS_CORE_NS --ignore-not-found=true
oc delete deployments --selector=app.kubernetes.io/part-of=open5gs -n $OPEN5GS_CORE_NS --ignore-not-found=true
oc delete services --selector=app.kubernetes.io/component=open5gs -n $OPEN5GS_CORE_NS --ignore-not-found=true
oc wait pods --selector=app.kubernetes.io/part-of=open5gs -n $OPEN5GS_CORE_NS --for=delete || true
oc wait services --selector=app.kubernetes.io/part-of=open5gs -n $OPEN5GS_CORE_NS --for=delete || true

VERSION=$VERSION \
envsubst < "$HERE/manifests/services.yaml" |
oc apply -f -

function d() {
    VERSION=$VERSION \
    COMPONENT=$1 \
    IMAGE="quay.io/jnunez/open5gs:${VERSION}" \
    NS=$2 \
    NET=$3 \
    NICS=$4 \
    envsubst < "$HERE/manifests/component.yaml" |
    oc apply -f -
}

function du() {
#testing UPF
    VERSION=$VERSION \
    COMPONENT=$1 \
    IMAGE="quay.io/jnunez/open5gs:${VERSION}" \
    NS=$2 \
    N4=$3 \
    N6=$4 \
    NICS=$5 \
    envsubst < "$HERE/manifests/$1-component.yaml" |
    oc apply -f -
}

function c() {

	MONGODB_URI=$(oc get mongodbcommunity open5gs-mongodb -n $OPEN5GS_MONGO_NS --output=jsonpath={.status.mongoUri})
	MONGODB_URI=mongodb://user:password@${MONGODB_URI:10}/open5gs?authSource=admin
	#echo "MONGODB URI is: "$MONGODB_URI
	MONGODB_URI=$MONGODB_URI \
	NS=$2 \
	envsubst < "$HERE/manifests/$1-configmap.yaml" |
	oc create -f -
}

function dw() {
	VERSION=2.3.1 \
	WEBUIPORT=3000 \
	COMPONENT=$1 \
	NS=$2 \
	IMAGE="quay.io/jnunez/webui:${VERSION}" \
	envsubst < "$HERE/manifests/webui-component.yaml" |
    oc apply -f -
}

function cw() {

	MONGODB_URIS=$(oc get mongodbcommunity open5gs-mongodb -n $OPEN5GS_MONGO_NS --output=jsonpath={.status.mongoUri})
	IFS=', ' read -r -a MONGODB_URI <<< "$MONGODB_URIS"
	MONGODB_URI=mongodb://user:password@${MONGODB_URI:10}/open5gs?authSource=admin
	MONGODB_URI=$MONGODB_URI \
	NS=$2 \
	envsubst < "$HERE/manifests/$1-configmap.yaml" |
	oc apply -f -
}

#Provision Config Maps

MONGODB_URIS=$(oc get mongodbcommunity open5gs-mongodb -n $OPEN5GS_MONGO_NS --output=jsonpath={.status.mongoUri})
IFS=', ' read -r -a MONGODB_URI <<< "$MONGODB_URIS"
MONGODB_URI=mongodb://user:password@${MONGODB_URI:10}/open5gs?authSource=admin
#c amf $OPEN5GS_CORE_NS
#c nrf $OPEN5GS_CORE_NS
kustomize build config/amf | oc apply -f -
kustomize build config/nrf | oc apply -f -
kustomize build config/ausf | oc apply -f -
kustomize build config/udm | oc apply -f -
kustomize build config/nssf | oc apply -f -
kustomize build config/upf | oc apply -f -
kustomize build config/wraproute | oc apply -f -
#oc wraprouting $OPEN5GS_CORE_NS
kustomize build config/sgwc | oc apply -f -
kustomize build config/sgwu | oc apply -f -
kustomize build config/udr | MONGODB_URI=$MONGODB_URI envsubst | oc apply -f -
kustomize build config/bsf | oc apply -f -
#c ausf $OPEN5GS_CORE_NS
#c udm $OPEN5GS_CORE_NS
#c nssf $OPEN5GS_CORE_NS
#c upf $OPEN5GS_CORE_NS
#c wraprouting $OPEN5GS_CORE_NS
#c sgwc $OPEN5GS_CORE_NS
#c sgwu $OPEN5GS_CORE_NS
#c udr $OPEN5GS_CORE_NS
#c bsf $OPEN5GS_CORE_NS
#c hss $OPEN5GS_CORE_NS
#c mme $OPEN5GS_CORE_NS
# create and provision configmap from config files
kustomize build config/hss | MONGODB_URI=$MONGODB_URI envsubst | oc apply -f -
kustomize build config/mme | oc apply -f -
kustomize build config/pcrf | MONGODB_URI=$MONGODB_URI envsubst | oc apply -f -
kustomize build config/pcf | MONGODB_URI=$MONGODB_URI envsubst | oc apply -f -
#c pcrf $OPEN5GS_CORE_NS
#c pcf $OPEN5GS_CORE_NS

#Provision Deployment objects
d sgwu $OPEN5GS_CORE_NS "s1ubh" "1"
d sgwc $OPEN5GS_CORE_NS " " "0"
du upf $OPEN5GS_CORE_NS "n3bh" "n6wan" "2"
d nrf $OPEN5GS_CORE_NS " " "0"
d amf $OPEN5GS_CORE_NS "n2bh" "1"
d ausf $OPEN5GS_CORE_NS " " "0"
d udm $OPEN5GS_CORE_NS " " "0"
d udr $OPEN5GS_CORE_NS " " "0"
d bsf $OPEN5GS_CORE_NS " " "0"
d hss $OPEN5GS_CORE_NS " " "0"
d mme $OPEN5GS_CORE_NS "s1cbh" "1"
d nssf $OPEN5GS_CORE_NS " " "0"
d pcf $OPEN5GS_CORE_NS " " "0"
d pcrf $OPEN5GS_CORE_NS " " "0"

#wait for UPF to get allocated IP
oc wait pods --selector=app.kubernetes.io/name=upf --for=condition=Ready
kustomize build config/smf | UPFIP=$(oc get pods -l app.kubernetes.io/name=upf -o jsonpath="{.items[*].status.podIP}") \
NS=$OPEN5GS_CORE_NS envsubst | oc apply -f -
d smf $OPEN5GS_CORE_NS

#cw webui $OPEN5GS_CORE_NS
kustomize build config/webui | MONGODB_URI=$MONGODB_URI envsubst | oc apply -f -
dw webui $OPEN5GS_CORE_NS
