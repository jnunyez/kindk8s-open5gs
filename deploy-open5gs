#!/bin/bash
set -e

HERE=$(dirname "$(readlink --canonicalize "$BASH_SOURCE")")

VERSION=2.3.2

kubectl delete configmap --selector=app.kubernetes.io/part-of=open5gs --ignore-not-found=true
kubectl delete deployments --selector=app.kubernetes.io/part-of=open5gs --ignore-not-found=true
kubectl delete services --selector=app.kubernetes.io/part-of=open5gs --ignore-not-found=true
kubectl wait pods --selector=app.kubernetes.io/part-of=open5gs --for=delete || true
kubectl wait services --selector=app.kubernetes.io/part-of=open5gs --for=delete || true

VERSION=$VERSION \
envsubst < "$HERE/manifests/services.yaml" |
kubectl apply -f -

function d() {
    VERSION=$VERSION \
    COMPONENT=$1 \
    IMAGE="localhost:5000/open5gs:2.3.2" \
    envsubst < "$HERE/manifests/component.yaml" |
    kubectl apply -f -
}

function du() {
#testing UPF
    VERSION=$VERSION \
    COMPONENT=$1 \
    IMAGE="localhost:5000/open5gs:2.3.2" \
    envsubst < "$HERE/manifests/$1-component.yaml" |
    kubectl apply -f -
}

function c() {

	MONGODB_URI=$(kubectl get mongodbcommunity open5gs-mongodb --output=jsonpath={.status.mongoUri})
	MONGODB_URI=mongodb://user:password@${MONGODB_URI:10}/open5gs?authSource=admin
	#echo "MONGODB URI is: "$MONGODB_URI
	MONGODB_URI=$MONGODB_URI \
	envsubst < "$HERE/manifests/$1-configmap.yaml" |
	kubectl create -f -
}

function dw() {
	VERSION=2.3.1 \
	WEBUIPORT=3000 \
	COMPONENT=$1 \
	IMAGE="localhost:5000/webui:${VERSION}" \
	envsubst < "$HERE/manifests/component-webui.yaml" |
    kubectl apply -f -
}

function cw() {

	MONGODB_URIS=$(kubectl get mongodbcommunity open5gs-mongodb --output=jsonpath={.status.mongoUri})
	IFS=', ' read -r -a MONGODB_URI <<< "$MONGODB_URIS"
	MONGODB_URI=mongodb://user:password@${MONGODB_URI:10}/open5gs?authSource=admin
	MONGODB_URI=$MONGODB_URI \
	envsubst < "$HERE/manifests/$1-configmap.yaml" |
	kubectl apply -f -
}


kubectl create -f "$HERE/manifests/amf-configmap.yaml"
kubectl create -f "$HERE/manifests/nrf-configmap.yaml"
kubectl create -f "$HERE/manifests/ausf-configmap.yaml"
kubectl create -f "$HERE/manifests/udm-configmap.yaml"
kubectl create -f "$HERE/manifests/nssf-configmap.yaml"


kubectl create -f "$HERE/manifests/upf-configmap.yaml"
kubectl create -f "$HERE/manifests/wraprouting-configmap.yaml"
#kubectl create configmap wraprouting --from-file="$HERE/manifests/wraprouting"

kubectl create -f "$HERE/manifests/sgwc-configmap.yaml"
kubectl create -f "$HERE/manifests/sgwu-configmap.yaml"

c udr
c bsf
c hss
c mme
c pcrf
c pcf


d sgwu
d sgwc
du upf
d nrf
d amf
d ausf
d udm
d udr
d bsf
d hss
d mme
d nssf
d pcf
d pcrf

#wait for UPF to get allocated IP
kubectl wait pods --selector=app.kubernetes.io/name=upf --for=condition=Ready
UPFIP=$(kubectl get pods -l app.kubernetes.io/name=upf -o jsonpath="{.items[*].status.podIP}") \
envsubst < "$HERE/manifests/smf-configmap.yaml" |
kubectl create -f -
d smf

cw webui
dw webui
