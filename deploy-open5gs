#!/bin/bash
set -e

HERE=$( cd "$(dirname "$0")" ; pwd -P )
. "$HERE/_env"
. "$HERE/_functions"

VERSION=2.3.2

if ! oc get namespace "$OPEN5GS_CORE_NS"
then
  oc create namespace "$OPEN5GS_CORE_NS"
  oc project "$OPEN5GS_CORE_NS"
  oc create sa open5gs
  oc adm policy add-scc-to-user privileged -z open5gs
fi

oc delete configmap --selector=app.kubernetes.io/part-of=open5gs -n $OPEN5GS_CORE_NS --ignore-not-found=true
oc delete deployments --selector=app.kubernetes.io/part-of=open5gs -n $OPEN5GS_CORE_NS --ignore-not-found=true
oc delete services --selector=app.kubernetes.io/part-of=open5gs -n $OPEN5GS_CORE_NS --ignore-not-found=true
oc wait pods --selector=app.kubernetes.io/part-of=open5gs -n $OPEN5GS_CORE_NS --for=delete || true
oc wait services --selector=app.kubernetes.io/part-of=open5gs -n $OPEN5GS_CORE_NS --for=delete || true

VERSION=$VERSION \
envsubst < "$HERE/manifests/services.yaml" |
oc apply -f -

function d() {
    VERSION=$VERSION \
    COMPONENT=$1 \
    IMAGE="quay.io/jnunez/open5gs:${VERSION}" \
    NS=$2 \
    envsubst < "$HERE/manifests/component.yaml" |
    oc apply -f -
}

function du() {
#testing UPF
    VERSION=$VERSION \
    COMPONENT=$1 \
    IMAGE="quay.io/jnunez/open5gs:${VERSION}" \
    NS=$2 \
    envsubst < "$HERE/manifests/$1-component.yaml" |
    oc apply -f -
}

function c() {

	MONGODB_URI=$(oc get mongodbcommunity open5gs-mongodb -n $OPEN5GS_MONGO_NS --output=jsonpath={.status.mongoUri})
	MONGODB_URI=mongodb://user:password@${MONGODB_URI:10}/open5gs?authSource=admin
	#echo "MONGODB URI is: "$MONGODB_URI
	MONGODB_URI=$MONGODB_URI \
	NS=$2 \
	envsubst < "$HERE/manifests/$1-configmap.yaml" |
	oc create -f -
}

function dw() {
	VERSION=2.3.1 \
	WEBUIPORT=3000 \
	COMPONENT=$1 \
	NS=$2 \
	IMAGE="quay.io/jnunez/webui:${VERSION}" \
	envsubst < "$HERE/manifests/component-webui.yaml" |
    oc apply -f -
}

function cw() {

	MONGODB_URIS=$(oc get mongodbcommunity open5gs-mongodb --output=jsonpath={.status.mongoUri})
	IFS=', ' read -r -a MONGODB_URI <<< "$MONGODB_URIS"
	MONGODB_URI=mongodb://user:password@${MONGODB_URI:10}/open5gs?authSource=admin
	MONGODB_URI=$MONGODB_URI \
	NS=$2 \
	envsubst < "$HERE/manifests/$1-configmap.yaml" |
	oc apply -f -
}

#Provision Config Maps
c amf $OPEN5GS_CORE_NS
c nrf $OPEN5GS_CORE_NS
c ausf $OPEN5GS_CORE_NS
c udm $OPEN5GS_CORE_NS
c nssf $OPEN5GS_CORE_NS
c upf $OPEN5GS_CORE_NS
c wraprouting $OPEN5GS_CORE_NS
c sgwc $OPEN5GS_CORE_NS
c sgwu $OPEN5GS_CORE_NS
c udr $OPEN5GS_CORE_NS
c bsf $OPEN5GS_CORE_NS
c hss $OPEN5GS_CORE_NS
c mme $OPEN5GS_CORE_NS
c pcrf $OPEN5GS_CORE_NS
c pcf $OPEN5GS_CORE_NS

#Provision Deployment objects
d sgwu $OPEN5GS_CORE_NS
d sgwc $OPEN5GS_CORE_NS
du upf $OPEN5GS_CORE_NS
d nrf $OPEN5GS_CORE_NS
d amf $OPEN5GS_CORE_NS
d ausf $OPEN5GS_CORE_NS
d udm $OPEN5GS_CORE_NS
d udr $OPEN5GS_CORE_NS
d bsf $OPEN5GS_CORE_NS
d hss $OPEN5GS_CORE_NS
d mme $OPEN5GS_CORE_NS
d nssf $OPEN5GS_CORE_NS
d pcf $OPEN5GS_CORE_NS
d pcrf $OPEN5GS_CORE_NS

#wait for UPF to get allocated IP
oc wait pods --selector=app.kubernetes.io/name=upf --for=condition=Ready
UPFIP=$(oc get pods -l app.kubernetes.io/name=upf -o jsonpath="{.items[*].status.podIP}") \
NS=$OPEN5GS_CORE_NS \
envsubst < "$HERE/manifests/smf-configmap.yaml" |
oc create -f -
d smf $OPEN5GS_CORE_NS

cw webui $OPEN5GS_CORE_NS
dw webui $OPEN5GS_CORE_NS
